/**
 * Engagement Lab SCSS Mixin Library
 * 
 * created by Johnny Richardson
 * 2017-2020
 * ==========
 */

// TRANSFORM HELPERS
// Helpers for making transforms

/// Create universal transform properties on element from given transform input.
/// @example scss
///     @include transform(scale(.5))
///
/// @param {custom-ident} $transforms - the tranform(s) function
/// @param {boolean} $force [false] - decorate with !important flag (use sparingly, as it breaks natural cascade!)
/// @group general
@mixin transform($transforms, $force: false) {

  // If force, transform property declaration overrides any other declarations.
  @if $force {
    -moz-transform: $transforms !important;
    -o-transform: $transforms !important;
    -ms-transform: $transforms !important;
    -webkit-transform: $transforms !important;
    transform: $transforms !important;
  }

  @else {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
  }
}

/// Rotate element included on by given degrees.
/// @example scss
///     @include transform(rotate(180))
///
/// @param {decimal} $deg - degrees to rotate
/// @group transitions
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

/// Scale element included on by given factor.
/// @example scss
///     @include scale(.5)
///
/// @param {decimal} $scale - the amount to scale
/// @group transitions
@mixin scale($scale) {
  @include transform(scale($scale));
}

/// Scale element included on by given factor on X axis.
/// @example scss
///     @include scaleX(.5)
///
/// @param {decimal} $scale - the amount to scale
/// @group transitions
@mixin scaleX($scale) {
  @include transform(scaleX($scale));
}

/// Scale element included on by given factor on Y axis.
/// @example scss
///     @include scaleY(.5)
///
/// @param {decimal} $scale - the amount to scale
/// @group transitions
@mixin scaleY($scale) {
  @include transform(scaleY($scale));
}

/// Skew element included on by given x and y degrees.
/// @example scss
///     @include skew(5, 10)
///
/// @param {number} $x - amount to skew on x
/// @param {number} $y - amount to skew on y
/// @group transitions
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

/// Move/translate element included on by given x and optional y length or percent.
/// @example scss
///     @include translate(15%)
///
/// @param {length} $x - amount to translate on x-axis
/// @param {length} $y [0] - amount to translate on y-axis
/// @group transitions
@mixin translate($x, $y: 0) {
  @include transform(translate($x, $y));
}

/*
 Transitions
 */

/// Breaks down in-line transition for multiple properties into unfolded format.
/// @example scss
///     @include(transform(scale(.5)))
///
/// @param {custom-ident} $transforms - the tranform(s) function
/// @link https://gist.github.com/tobiasahlin/7a421fb9306a4f518aab
/// @group transitions
@function unfold-transition($transition) {
  // Default values
  $property: all;
  $duration: 0.2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();

  @for $i from 1 through length($defaultProperties) {
    $p: null;

    @if $i <=length($transition) {
      $p: nth($transition, $i);
    }

    @else {
      $p: nth($defaultProperties, $i);
    }

    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

/// Apply transition for element given one property, duration, optional easing method
/// @example scss
///     @include transition(width, 5s, ease-in-out)
///
/// @param {string} $transition-property - property to transition on
/// @param {number} $transition-time - duration of transition
/// @param {string} $ease-method [ease] - optional ease type/function
/// @group transitions
@mixin transition($transition-property, $transition-time, $ease-method: ease) {
  -webkit-transition: $transition-property $transition-time $ease-method;
  -moz-transition: $transition-property $transition-time $ease-method;
  -ms-transition: $transition-property $transition-time $ease-method;
  -o-transition: $transition-property $transition-time $ease-method;
  transition: $transition-property $transition-time $ease-method;
}

/// Apply multiple transitions for element given properties, durations, easing
/// @example scss
///     @include multi-transition(width 2s, height 0.3s ease-in-out)
///
/// @param {string} $transitions - comma-seperated list of transitions
/// @group transitions
@mixin multi-transition($transitions...) {
  $unfoldedTransitions: ();

  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions,
        unfold-transition($transition),
        comma);
  }

  -webkit-transition: $unfoldedTransitions;
  -moz-transition: $unfoldedTransitions;
  -ms-transition: $unfoldedTransitions;
  -o-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}